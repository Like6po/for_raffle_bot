from aiogram import Bot
from aiogram.dispatcher.fsm.context import FSMContext
from aiogram.types import Message
from aiogram.utils.markdown import hbold, hcode

from database.contexts import ChannelContext
from keyboards.contest import contest_kb, post_button_kb
from misc.contest import get_content, send_post


async def collect_data(message: Message,
                       state: FSMContext,
                       bot: Bot,
                       channel_db: ChannelContext):
    state_data = await state.get_data()
    last_state = (await state.get_state()).split(':')[-1]

    if not state_data.get('channel_id', None):
        return await message.reply('–û–π-–æ–π! channel_id –±—ã–ª —É—Ç–µ—Ä—è–Ω!\nplaceholder: /start ')

    if content := await get_content(message, last_state, bot, channel_db):
        if last_state in ['end_count', 'end_at']:
            state_data.update({
                'end_count' if last_state == 'end_at' else 'end_at': None
            })

        if last_state == 'sponsor_channels':
            if content is not True:
                ids_set = state_data.get(last_state, set())
                if ids_set is None:  # –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å "–Ω–∞–∑–∞–¥"
                    ids_set = set()
                ids_set.update(content)
                state_data.update({last_state: ids_set})
            else:  # –µ—Å–ª–∏ —Å—Ä–∞–∑—É –Ω–∞–ø–∏—Å–∞—Ç—å –ó–∞–∫–æ–Ω—á–∏—Ç—å
                if not state_data.get(last_state, None):
                    state_data.update({last_state: None})
        else:
            state_data.update({
                last_state: content
            })
        await state.update_data(state_data)
        # print(f'{last_state}: {state_data}')
    else:
        await message.answer('–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –≤–µ—Ä–Ω–∞!')
        return

    if last_state == 'text':
        await state.set_state()
        await message.answer(
            'üîò –•–æ—Ä–æ—à–æ, –±—É–¥–µ–º —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –æ—Å—Ç–∞–≤–∏–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é? (–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: "–£—á–∞–≤—Å—Ç–≤–æ–≤–∞—Ç—å")',
            reply_markup=contest_kb(state_data['channel_id'],
                                    last_state=last_state,
                                    condition_buttons_title=('üìî –£–∫–∞–∑–∞—Ç—å', 'üîú –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é')))
    elif last_state == 'btn_title':
        await state.set_state()
        await message.answer('üñº –û—Ç–ª–∏—á–Ω–æ, –∫–∞–∫ –Ω–∞—Å—á—ë—Ç –≤–ª–æ–∂–µ–Ω–∏–π?',
                             reply_markup=contest_kb(state_data['channel_id'],
                                                     last_state=last_state,
                                                     condition_buttons_title=('‚úÖ –° –≤–ª–æ–∂–µ–Ω–∏–µ–º', '‚ùå –ë–µ–∑ –≤–ª–æ–∂–µ–Ω–∏—è')))

    elif last_state == 'attachment_hash':
        await state.set_state()
        await message.answer('üåê –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Å—ã–ª–æ–∫',
                             reply_markup=contest_kb(state_data['channel_id'],
                                                     last_state=last_state,
                                                     condition_buttons_title=('‚úÖ –í–∫–ª—é—á–∏—Ç—å', '‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å')))

    elif last_state == 'winner_count':
        await state.set_state()
        await message.answer(
            '–ö–∞–Ω–∞–ª—ã-—É—á–∞—Å—Ç–Ω–∏–∫–∏?',
            reply_markup=contest_kb(state_data['channel_id'],
                                    last_state=last_state,
                                    condition_buttons_title=('–ë–µ–∑', '–£–∫–∞–∑–∞—Ç—å')))

    elif last_state == 'sponsor_channels':
        if not message.text.lower() == '–∑–∞–∫–æ–Ω—á–∏—Ç—å':
            return await message.reply(f'–ß—Ç–æ–±—ã –∑–∞–∫–æ–Ω—á–∏—Ç—å –Ω–∞–ø–∏—à–∏—Ç–µ {hcode("–ó–∞–∫–æ–Ω—á–∏—Ç—å")}.')
        await state.set_state()
        await message.answer(
            'üìÖ –ö–æ–≥–¥–∞ –æ–ø—É–±–ª–∏–∫—É–µ–º –ø–æ—Å—Ç?',
            reply_markup=contest_kb(state_data['channel_id'], last_state=last_state,
                                    condition_buttons_title=('üîú –°—Ä–∞–∑—É', 'üìÜ –í –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—É—é –¥–∞—Ç—É')))

    elif last_state == 'start_at':
        await state.set_state()
        await message.answer(
            '‚õî –ö–æ–Ω–∫—É—Ä—Å –±—É–¥–µ—Ç –∑–∞–∫–æ–Ω—á–µ–Ω –≤ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—É—é –¥–∞—Ç—É –∏–ª–∏ –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –Ω—É–∂–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤?',
            reply_markup=contest_kb(state_data['channel_id'], last_state=last_state,
                                    condition_buttons_title=('üë§ –£—á–∞c—Ç–Ω–∏–∫–∏', 'üìÜ –î–∞—Ç–∞')))

    elif last_state in ['end_count', 'end_at']:
        await send_post(bot, message.from_user.id, state_data, post_button_kb(state_data['btn_title'], 0))  # 0 –∫–æ—Å—Ç—ã–ª—å
        await message.answer(f"{hbold('üë• –ö–æ–ª-–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π:')} {state_data['winner_count']}"
                             f"\n{hbold('‚ñ∂ –ü—É–±–ª–∏–∫–∞—Ü–∏—è:')} {state_data['start_at'].strftime('–≤ %H:%M %d.%m.%Y') if state_data['start_at'] else '–°–µ–π—á–∞—Å'}"
                             f"\n{hbold('‚è∏ –û–∫–æ–Ω—á–∞–Ω–∏–µ:')} {state_data['end_at'].strftime('–≤ %H:%M %d.%m.%Y') if state_data['end_at'] else '–ø–æ—Å–ª–µ %s —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤' % (state_data['end_count'])}"
                             f"\n{hbold('üåê –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Å—ã–ª–æ–∫:')} {'‚úÖ' if state_data['is_attachment_preview'] else '‚ùå'}"
                             f"\n{hbold('üåê –ö–∞–Ω–∞–ª—ã-—É—á–∞—Å—Ç–Ω–∏–∫–∏:')} {state_data['sponsor_channels'] if state_data['sponsor_channels'] else '‚ùå'}"
                             f"\n\n‚ùó –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ!",
                             reply_markup=contest_kb(state_data['channel_id'], last_state=last_state,
                                                     condition_buttons_title=['‚úî –ì–æ—Ç–æ–≤–æ!']))
