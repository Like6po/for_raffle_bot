from aiogram import Bot
from aiogram.dispatcher.fsm.context import FSMContext
from aiogram.types import CallbackQuery
from aiogram.utils.markdown import hbold

from database.contexts import ChannelContext, ContestContext
from keyboards.contest import contest_kb, post_button_kb, ContestCallback
from misc.contest import send_post
from states.contest import ContestStatus


async def contest_condition(cbq: CallbackQuery,
                            bot: Bot,
                            callback_data: ContestCallback,
                            state: FSMContext,
                            channel_db: ChannelContext,
                            contest_db: ContestContext):
    state_data = await state.get_data()

    if not state_data.get('channel_id', None):
        return await cbq.message.reply('–û–π-–æ–π! channel_id –±—ã–ª —É—Ç–µ—Ä—è–Ω!\nplaceholder: /start ')

    if callback_data.last_state == 'text':
        if callback_data.condition:
            await state.set_state(ContestStatus.btn_title)
            await cbq.message.edit_text('–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∫–Ω–æ–ø–∫–∏!',
                                        reply_markup=contest_kb(callback_data.channel_id, last_state='btn_title'))
        else:
            state_data.update({
                'btn_title': None
            })
            await cbq.message.edit_text('üñº –û—Ç–ª–∏—á–Ω–æ, –∫–∞–∫ –Ω–∞—Å—á—ë—Ç –≤–ª–æ–∂–µ–Ω–∏–π?',
                                        reply_markup=contest_kb(state_data['channel_id'],
                                                                last_state='btn_title',
                                                                condition_buttons_title=(
                                                                    '‚úÖ –° –≤–ª–æ–∂–µ–Ω–∏–µ–º', '‚ùå –ë–µ–∑ –≤–ª–æ–∂–µ–Ω–∏—è')))

    elif callback_data.last_state == 'btn_title':
        if callback_data.condition:
            await state.set_state(ContestStatus.attachment_hash)
            await cbq.message.edit_text(
                '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –≤–ª–æ–∂–µ–Ω–∏–µ!\n–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.',
                reply_markup=contest_kb(callback_data.channel_id, last_state='attachment_hash'))
        else:
            state_data.update({
                'attachment_hash': None
            })
            await state.set_state(ContestStatus.is_attachment_preview)
            await cbq.message.edit_text('üåê –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Å—ã–ª–æ–∫',
                                        reply_markup=contest_kb(callback_data.channel_id,
                                                                last_state='attachment_hash',
                                                                condition_buttons_title=('‚úÖ –í–∫–ª—é—á–∏—Ç—å', '‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å')))

    elif callback_data.last_state == 'attachment_hash':
        state_data.update({
            'is_attachment_preview': callback_data.condition
        })

        await state.set_state(ContestStatus.winner_count)
        await cbq.message.edit_text('üë• –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π!',
                                    reply_markup=contest_kb(callback_data.channel_id,
                                                            last_state='is_attachment_preview'))

    elif callback_data.last_state == 'winner_count':
        if callback_data.condition:
            state_data.update({
                'sponsor_channels': None
            })
            await cbq.message.edit_text(
                'üìÖ –ö–æ–≥–¥–∞ –æ–ø—É–±–ª–∏–∫—É–µ–º –ø–æ—Å—Ç?',
                reply_markup=contest_kb(callback_data.channel_id, last_state='sponsor_channels',
                                        condition_buttons_title=('üîú –°—Ä–∞–∑—É', 'üìÜ –í –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—É—é –¥–∞—Ç—É')))
        else:
            await state.set_state(ContestStatus.sponsor_channels)
            await cbq.message.edit_text(
                f'–ß–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –∏ @ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ —Ç–æ —Ç–∞–º.',
                reply_markup=contest_kb(callback_data.channel_id, last_state='sponsor_channels'))

    elif callback_data.last_state == 'sponsor_channels':
        if callback_data.condition:
            state_data.update({
                'start_at': None
            })
            await cbq.message.edit_text(
                '‚õî –ö–æ–Ω–∫—É—Ä—Å –±—É–¥–µ—Ç –∑–∞–∫–æ–Ω—á–µ–Ω –≤ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—É—é –¥–∞—Ç—É –∏–ª–∏ –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –Ω—É–∂–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤?',
                reply_markup=contest_kb(callback_data.channel_id, last_state='start_at',
                                        condition_buttons_title=('üë§ –£—á–∞c—Ç–Ω–∏–∫–∏', 'üìÜ –î–∞—Ç–∞')))
        else:
            await state.set_state(ContestStatus.start_at)
            await cbq.message.edit_text(
                f'–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –¥–∞—Ç—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞!\n–§–æ—Ä–º–∞—Ç: {hbold("—á–∞—Å—ã:–º–∏–Ω—É—Ç—ã –¥–µ–Ω—å.–º–µ—Å—è—Ü.–≥–æ–¥")}\n'
                f'–ü—Ä–∏–º–µ—Ä: {hbold("18:03 08.09.2022")}',
                reply_markup=contest_kb(callback_data.channel_id, last_state='start_at'))

    elif callback_data.last_state == 'start_at':
        if callback_data.condition:
            await state.set_state(ContestStatus.end_count)
            await cbq.message.edit_text('–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –∫–æ–Ω–∫—É—Ä—Å–∞!',
                                        reply_markup=contest_kb(callback_data.channel_id, last_state='end_count'))
        else:
            await state.set_state(ContestStatus.end_at)
            await cbq.message.edit_text(
                f'–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –∫–æ–Ω–∫—É—Ä—Å–∞!\n–§–æ—Ä–º–∞—Ç: {hbold("—á–∞—Å—ã:–º–∏–Ω—É—Ç—ã –¥–µ–Ω—å.–º–µ—Å—è—Ü.–≥–æ–¥")}\n'
                f'–ü—Ä–∏–º–µ—Ä: {hbold("18:03 08.09.2022")}',
                reply_markup=contest_kb(callback_data.channel_id, last_state='end_at'))

    elif callback_data.last_state in ['end_count', 'end_at']:
        channel_data = await channel_db.get(channel_id=state_data['channel_id'])
        contest_data = await contest_db.new(user=cbq.from_user,
                                            channel=channel_data,
                                            channel_tg_id=channel_data.tg_id,
                                            text=state_data['text'],
                                            btn_title=state_data['btn_title'],
                                            winner_count=state_data['winner_count'],
                                            attachment_hash=state_data['attachment_hash'],
                                            start_at=state_data['start_at'],
                                            end_at=state_data['end_at'],
                                            end_count=state_data['end_count'])

        msg = await send_post(bot, channel_data.tg_id, state_data,
                              post_button_kb(state_data['btn_title'], contest_data.id))

        await contest_db.set_message_id(contest_data.id, msg.message_id)

        return await cbq.message.edit_text('todo: finish text + keyboard')

    await state.update_data(state_data)
