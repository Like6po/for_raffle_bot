from aiogram.types import CallbackQuery
from aiogram.dispatcher.fsm.context import FSMContext

from states.contest import ContestStatus
from keyboards.contest import contest_kb, ContestCallback


async def contest_return(cbq: CallbackQuery, state: FSMContext):
    callback_data = ContestCallback.unpack(cbq.data)
    await state.set_state('ContestStatus:' + callback_data.last_state)

    if callback_data.last_state == 'text':
        await cbq.message.edit_text("üìã –ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ—Å—Ç–∞!", reply_markup=contest_kb(callback_data.channel_id))

    elif callback_data.last_state == 'btn_title':
        await cbq.message.edit_text(
            'üîò –•–æ—Ä–æ—à–æ, –±—É–¥–µ–º —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –æ—Å—Ç–∞–≤–∏–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é? (–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: "–£—á–∞–≤—Å—Ç–≤–æ–≤–∞—Ç—å")',
            reply_markup=contest_kb(callback_data.channel_id,
                                    last_state='text',
                                    condition_buttons_title=('üìî –£–∫–∞–∑–∞—Ç—å', 'üîú –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é')))

    elif callback_data.last_state == 'attachment_hash':
        await cbq.message.edit_text('üñº –û—Ç–ª–∏—á–Ω–æ, –∫–∞–∫ –Ω–∞—Å—á—ë—Ç –≤–ª–æ–∂–µ–Ω–∏–π?',
                                    reply_markup=contest_kb(callback_data.channel_id,
                                                            last_state='btn_title',
                                                            condition_buttons_title=('‚úÖ –° –≤–ª–æ–∂–µ–Ω–∏–µ–º', '‚ùå –ë–µ–∑ –≤–ª–æ–∂–µ–Ω–∏—è')))
    elif callback_data.last_state == 'is_attachment_preview':
        await cbq.message.edit_text('üåê –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Å—ã–ª–æ–∫',
                                    reply_markup=contest_kb(callback_data.channel_id,
                                                            last_state='attachment_hash',
                                                            condition_buttons_title=('‚úÖ –í–∫–ª—é—á–∏—Ç—å', '‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å')))

    elif callback_data.last_state == 'winner_count':
        await cbq.message.edit_text('üë• –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π!',
                                    reply_markup=contest_kb(callback_data.channel_id,
                                                            last_state='is_attachment_preview'))

    elif callback_data.last_state == 'start_at':
        await state.set_state()
        await cbq.message.edit_text('üìÖ –ö–æ–≥–¥–∞ –æ–ø—É–±–ª–∏–∫—É–µ–º –ø–æ—Å—Ç?',
                                    reply_markup=contest_kb(callback_data.channel_id, last_state='winner_count',
                                                            condition_buttons_title=('üîú –°—Ä–∞–∑—É', 'üìÜ –í –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—É—é –¥–∞—Ç—É')))

    elif callback_data.last_state in ['end_at', 'end_count']:
        await state.set_state()
        await cbq.message.edit_text(
            '‚õî –ö–æ–Ω–∫—É—Ä—Å –±—É–¥–µ—Ç –∑–∞–∫–æ–Ω—á–µ–Ω –≤ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—É—é –¥–∞—Ç—É –∏–ª–∏ –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –Ω—É–∂–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤?',
            reply_markup=contest_kb(callback_data.channel_id, last_state='start_at',
                                    condition_buttons_title=('üë§ –£—á–∞c—Ç–Ω–∏–∫–∏', 'üìÜ –î–∞—Ç–∞')))
